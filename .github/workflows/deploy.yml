# .github/workflows/deploy.yml
name: Deploy
on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
jobs:
  deploy-prometheus:
    name: "Deploy Monitoring stack"
    runs-on: "ubuntu-latest"
    container:
      image: vr00mm/docker-helm-client:v0.1.0
      env:
        KUBECONFIG: "/tmp/kubeconfig"
    steps:
      - name: Load Workspace
        uses: actions/checkout@v2
      - name: Init Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" > /tmp/kubeconfig
          chmod 0600 /tmp/kubeconfig
      - name: Add prometheus-community Repository
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
      - name: Deploy Chart
        run: |
          helm upgrade --install \
            kube-prometheus-stack prometheus-community/kube-prometheus-stack \
            --namespace monitoring --create-namespace \
            -f values/kube-prometheus-stack/values.yaml \
            --set "grafana.adminPassword=${{ secrets.GRAFANA_SECRET }}" \
            --set "grafana.ingress.hosts[0]=grafana.${{ secrets.K8S_DOMAIN }}"
          kubectl -n monitoring wait --for=condition=Ready pods --all

      - name: Delete Kubeconfig
        run: rm /tmp/kubeconfig

  deploy-oidc-provider:
    name: "Deploy OIDC Provider with yaml manifest"
    runs-on: "ubuntu-latest"
    container:
      image: vr00mm/docker-helm-client:v0.1.0
      env:
        KUBECONFIG: "/tmp/kubeconfig"
    steps:
      - name: Load Workspace
        uses: actions/checkout@v2
      - name: Init Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" > /tmp/kubeconfig
          chmod 0600 /tmp/kubeconfig
      - name: Deploy Manifest
        run: |
          kubectl create namespace "oidc-provider" || true
          kubectl -n 'oidc-provider' apply -f ./src/oidc-provider/manifest.yaml
          kubectl -n oidc-provider wait --for=condition=Ready pods --all

      - name: Delete Kubeconfig
        run: rm /tmp/kubeconfig
        
  deploy-test-app:
    name: "Deploy test application"
    runs-on: "ubuntu-latest"
    container:
      image: vr00mm/docker-helm-client:v0.1.0
      env:
        KUBECONFIG: "/tmp/kubeconfig"
    steps:
      - name: Load Workspace
        uses: actions/checkout@v2
      - name: Init Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" > /tmp/kubeconfig
          chmod 0600 /tmp/kubeconfig
      - name: Deploy Local Helm
        run: |
          helm upgrade --install \
            podtato-head ./src/podtato-head \
            --namespace podtato-head --create-namespace \
            -f ./values/podtato-head/values.yaml \
            --set "ingress.hosts[0].host=podtato-head.${{ secrets.K8S_DOMAIN }}"
            

          kubectl -n podtato-head wait --for=condition=Ready pods --all

      - name: Delete Kubeconfig
        run: rm /tmp/kubeconfig

  deploy-litmus:
    needs: [deploy-oidc-provider,deploy-prometheus,deploy-test-app]
    name: "Deploy Litmus Chaos Center Helm Chart"
    runs-on: "ubuntu-latest"
    container:
      image: vr00mm/docker-helm-client:v0.1.0
      env:
        KUBECONFIG: "/tmp/kubeconfig"
    steps:
      - name: Load Workspace
        uses: actions/checkout@v2
      - name: Init Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" > /tmp/kubeconfig
          chmod 0600 /tmp/kubeconfig
      - name: Add Litmus Repository
        run: |
          helm repo add litmuschaos https://litmuschaos.github.io/litmus-helm/
          helm repo update
      - name: Deploy Chart
        run: |
          helm upgrade --install litmusportal ./src/litmus \
            --namespace litmus --create-namespace \
            -f ./values/litmus/common.yaml \
            -f ./values/litmus/env-prod.yaml \
            --set "ingress.host.name=litmus.${{ secrets.K8S_DOMAIN }}" \
            --set "portal.server.authServer.env.ADMIN_USERNAME=${{ secrets.LITMUS_USERNAME }}" \
            --set "portal.server.authServer.env.ADMIN_PASSWORD=${{ secrets.LITMUS_PASSWORD }}" \
            --set "adminConfig.DBUSER=${{ secrets.LITMUS_DB_USER }}" \
            --set "adminConfig.DBPASSWORD=${{ secrets.LITMUS_DB_PASSWORD }}" \
            --set "adminConfig.JWTSecret=${{ secrets.LITMUS_JWT_SECRET }}"
           kubectl -n litmus wait --for=condition=Ready --timeout=180s pods --all
           curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.LITMUS_URL }}

      - name: Delete Kubeconfig
        run: rm /tmp/kubeconfig

  init-litmus:
    needs: [deploy-litmus]
    name: "Init Litmus Params Through API"
    runs-on: "ubuntu-latest"
    container:
      image: vr00mm/litmus-as-code:v0.1.0
      env:
        KUBECONFIG: "/tmp/kubeconfig"
        KUBE_CONTEXT: "minikube"
        LITMUS_URL: "http://litmus.${{ secrets.K8S_DOMAIN }}"
        LITMUS_USERNAME : ${{ secrets.LITMUS_USERNAME }}
        LITMUS_PASSWORD : ${{ secrets.LITMUS_PASSWORD }}
    steps:
      - name: Load Workspace
        uses: actions/checkout@v2
      - name: Init Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" > /tmp/kubeconfig
          chmod 0600 /tmp/kubeconfig
      - name: Configure Litmus
        run: |
          bash /entrypoint.sh ./values/litmus-as-code/configuration.json
